//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34014
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_PharmacyServerApp_ClientProxy.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CatalogModelService", Namespace="http://schemas.datacontract.org/2004/07/PharmacyService_dll")]
    [System.SerializableAttribute()]
    public partial class CatalogModelService : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProducerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Info {
            get {
                return this.InfoField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoField, value) != true)) {
                    this.InfoField = value;
                    this.RaisePropertyChanged("Info");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProducerName {
            get {
                return this.ProducerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProducerNameField, value) != true)) {
                    this.ProducerNameField = value;
                    this.RaisePropertyChanged("ProducerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITest")]
    public interface ITest {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITest/test", ReplyAction="http://tempuri.org/ITest/testResponse")]
        int test(int number);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITest/test", ReplyAction="http://tempuri.org/ITest/testResponse")]
        System.IAsyncResult Begintest(int number, System.AsyncCallback callback, object asyncState);
        
        int Endtest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITest/Get", ReplyAction="http://tempuri.org/ITest/GetResponse")]
        WCF_PharmacyServerApp_ClientProxy.ServiceReference1.CatalogModelService[] Get(string ProductName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITest/Get", ReplyAction="http://tempuri.org/ITest/GetResponse")]
        System.IAsyncResult BeginGet(string ProductName, System.AsyncCallback callback, object asyncState);
        
        WCF_PharmacyServerApp_ClientProxy.ServiceReference1.CatalogModelService[] EndGet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestChannel : WCF_PharmacyServerApp_ClientProxy.ServiceReference1.ITest, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class testCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public testCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WCF_PharmacyServerApp_ClientProxy.ServiceReference1.CatalogModelService[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WCF_PharmacyServerApp_ClientProxy.ServiceReference1.CatalogModelService[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestClient : System.ServiceModel.ClientBase<WCF_PharmacyServerApp_ClientProxy.ServiceReference1.ITest>, WCF_PharmacyServerApp_ClientProxy.ServiceReference1.ITest {
        
        private BeginOperationDelegate onBegintestDelegate;
        
        private EndOperationDelegate onEndtestDelegate;
        
        private System.Threading.SendOrPostCallback ontestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDelegate;
        
        private EndOperationDelegate onEndGetDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompletedDelegate;
        
        public TestClient() {
        }
        
        public TestClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<testCompletedEventArgs> testCompleted;
        
        public event System.EventHandler<GetCompletedEventArgs> GetCompleted;
        
        public int test(int number) {
            return base.Channel.test(number);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Begintest(int number, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begintest(number, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int Endtest(System.IAsyncResult result) {
            return base.Channel.Endtest(result);
        }
        
        private System.IAsyncResult OnBegintest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int number = ((int)(inValues[0]));
            return this.Begintest(number, callback, asyncState);
        }
        
        private object[] OnEndtest(System.IAsyncResult result) {
            int retVal = this.Endtest(result);
            return new object[] {
                    retVal};
        }
        
        private void OntestCompleted(object state) {
            if ((this.testCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.testCompleted(this, new testCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void testAsync(int number) {
            this.testAsync(number, null);
        }
        
        public void testAsync(int number, object userState) {
            if ((this.onBegintestDelegate == null)) {
                this.onBegintestDelegate = new BeginOperationDelegate(this.OnBegintest);
            }
            if ((this.onEndtestDelegate == null)) {
                this.onEndtestDelegate = new EndOperationDelegate(this.OnEndtest);
            }
            if ((this.ontestCompletedDelegate == null)) {
                this.ontestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntestCompleted);
            }
            base.InvokeAsync(this.onBegintestDelegate, new object[] {
                        number}, this.onEndtestDelegate, this.ontestCompletedDelegate, userState);
        }
        
        public WCF_PharmacyServerApp_ClientProxy.ServiceReference1.CatalogModelService[] Get(string ProductName) {
            return base.Channel.Get(ProductName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGet(string ProductName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet(ProductName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WCF_PharmacyServerApp_ClientProxy.ServiceReference1.CatalogModelService[] EndGet(System.IAsyncResult result) {
            return base.Channel.EndGet(result);
        }
        
        private System.IAsyncResult OnBeginGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ProductName = ((string)(inValues[0]));
            return this.BeginGet(ProductName, callback, asyncState);
        }
        
        private object[] OnEndGet(System.IAsyncResult result) {
            WCF_PharmacyServerApp_ClientProxy.ServiceReference1.CatalogModelService[] retVal = this.EndGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompleted(object state) {
            if ((this.GetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompleted(this, new GetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAsync(string ProductName) {
            this.GetAsync(ProductName, null);
        }
        
        public void GetAsync(string ProductName, object userState) {
            if ((this.onBeginGetDelegate == null)) {
                this.onBeginGetDelegate = new BeginOperationDelegate(this.OnBeginGet);
            }
            if ((this.onEndGetDelegate == null)) {
                this.onEndGetDelegate = new EndOperationDelegate(this.OnEndGet);
            }
            if ((this.onGetCompletedDelegate == null)) {
                this.onGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompleted);
            }
            base.InvokeAsync(this.onBeginGetDelegate, new object[] {
                        ProductName}, this.onEndGetDelegate, this.onGetCompletedDelegate, userState);
        }
    }
}
